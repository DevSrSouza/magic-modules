package io.labs.dotanuki.magicmodules.tests

import org.assertj.core.api.Assertions.assertThat
import org.gradle.testkit.runner.GradleRunner
import org.junit.Ignore
import org.junit.Rule
import org.junit.Test
import org.junit.rules.TemporaryFolder
import java.io.File

class MagicModulesPluginTests {

    @get:Rule val tempFolder = TemporaryFolder()

    @Test fun `should fail when target project missing buildSrc`() {

        val targetProjectDir = prepareFixture("missing_build_src")

        val build = GradleRunner.create()
            .withProjectDir(targetProjectDir)
            .withPluginClasspath()
            .withArguments("clean", "run", "--info")
            .buildAndFail()

        assertThat(build.output).run {
            contains("Failed to apply plugin [id 'io.labs.dotanuki.magicmodules']")
            contains("BUILD FAILED")
        }
    }

    @Test fun `should include multiple modules with custom configuration`() {

        val targetProjectDir = prepareFixture("multiple_modules_custom_config")

        val build = GradleRunner.create()
            .withProjectDir(targetProjectDir)
            .withPluginClasspath()
            .withArguments("clean", ":app:assembleDebug", "--info")
            .build()

        assertThat(build.output).run {
            contains("Included on settings.gradle -> :home")
            contains("Included on settings.gradle -> :login")
            contains("Included on settings.gradle -> :core")
            contains("Included on settings.gradle -> :utils")
            doesNotContain("Included on settings.gradle -> :app")
            contains("BUILD SUCCESS")
        }
    }

    @Ignore @Test fun `should include multiple nested modules`() {

        val targetProjectDir = prepareFixture("multiple_nested_modules")

        val build = GradleRunner.create()
            .withProjectDir(targetProjectDir)
            .withPluginClasspath()
            .withArguments("clean", ":app:assembleDebug", "--info")
            .build()

        assertThat(build.output).run {
            contains("Included on settings.gradle -> :features:home")
            contains("Included on settings.gradle -> :features:login")
            contains("Included on settings.gradle -> :common:core")
            contains("Included on settings.gradle -> :common:utils")
            contains("Included on settings.gradle -> :app")
            contains("BUILD SUCCESS")
        }

        val mappedLibraries = """
                // Generated by MagicModules plugin. Mind your Linters!
                import kotlin.String
                import kotlin.collections.List
                
                object Libraries {
                    const val FEATURES_HOME: String = ":features:home"
                
                    const val FEATURES_LOGIN: String = ":features:login"
                
                    const val COMMON_CORE: String = ":common:core"
                
                    const val COMMON_UTILS: String = ":common:utils"
                
                    val allAvailable: List<String> = 
                            listOf(
                                FEATURES_HOME,
                                FEATURES_LOGIN,
                                COMMON_CORE,
                                COMMON_UTILS
                            )
                }
                
            """.trimIndent()

        val generatedCode = targetProjectDir.resolve("buildSrc/src/main/kotlin/Libraries.kt").readText()

        assertThat(mappedLibraries).isEqualTo(generatedCode)
    }

    private fun prepareFixture(name: String): File = tempFolder.newFolder().apply {
        File("$TEST_FIXTURES/$name").copyRecursively(this)
    }

    companion object {
        private const val TEST_FIXTURES = "src/test/fixtures/integration"
    }
}